# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/board.gni")
import("//build/images/args.gni")
import("//build/images/boot.gni")
import("//build/images/custom_signing.gni")
import("//build/images/custom_signing.gni")
import("//build/images/manifest.gni")
import("//build/images/ta.gni")
import("//build/images/vbmeta.gni")
import("//build/images/zedboot/zedboot_args.gni")
import("//build/images/zxcrypt.gni")
import("//build/product.gni")
import("//build/unification/future/images/devmgr_config.gni")
import("//build/unification/future/images/zedboot.gni")
import("//build/unification/zbi/migrated_zbi.gni")

# Note: the contents of the zbi are now located in the zedboot.gni file in the
# imports above.

# Zedboot must be included to pave devices until recovery has a replacement mechanism. Products can specify override_recovery_label to determine which image to include in zircon-r.
use_zedboot_as_recovery = false
zedboot_metadata_slot = "zedboot"
if (override_recovery_label == "") {
  use_zedboot_as_recovery = true
  zedboot_metadata_slot = "zircon-r"
}

action("devmgr_config.txt") {
  visibility = [
    ":devmgr_config",
    ":zbi",
    ":zedboot.vbmeta",
    ":zedboot.vbmeta__zbi_props",
    ":zedboot.vbmeta__vb_desc",
    "//build/unification/future/images:*",  # XXX
  ]

  script = "../manifest.py"
  outputs = [ "$target_out_dir/$target_name" ]

  args = [ "--output=" + rebase_path(outputs[0], root_build_dir) ]
  entries = [
              "netsvc.netboot=true",
              "netsvc.all-features=true",
            ] + zedboot_devmgr_config
  foreach(entry, entries) {
    args += [ "--entry=$entry" ]
  }
}

devmgr_config("devmgr_config") {
  label = ":devmgr_config.txt"
}

generated_file("zxcrypt_config.txt") {
  outputs = [ "$target_out_dir/$target_name" ]
  contents = zxcrypt_key_source
}

cmdline = [
            "console.shell=true",
            "netsvc.disable=false",
            "kernel.enable-debugging-syscalls=true",
            "kernel.enable-serial-syscalls=true",
#            "driver.bcm_unimac.log=DEBUG",
#            "driver.ethernet.log=DEBUG",
          ] + zedboot_cmdline_args + board_zedboot_cmdline_args

zbi_input("kernel_cmdline") {
  type = "cmdline"
  args = []
  foreach(arg, cmdline) {
    args += [ "--entry=$arg" ]
  }
  sources = zedboot_cmdline_files
}

ta_deps = []
foreach(ta_uuid, zedboot_ta_uuids) {
  resource("ta_$ta_uuid") {
    sources = [ "${ta_path}/${ta_uuid}${ta_src_suffix}" ]
    outputs = [ "lib/firmware/${ta_uuid}${ta_dest_suffix}" ]
  }

  ta_deps += [ ":ta_$ta_uuid" ]
}

group("ta") {
  deps = ta_deps
}

# Note: This output is also used by a script in //scripts/verify_cmdline_params.
migrated_zbi("zbi") {
  output_name = "zedboot"
  output_dir = root_out_dir
  testonly = true

  deps = [
    ":kernel_cmdline",
    ":ta",
    "//build/unification/future/images:zxcrypt",
    "//build/unification/zbi:kernel",
    "//src/sys/installer:bin",
  ]
  deps += zedboot_deps
  deps += product_zedboot_bootfs_labels + board_zedboot_bootfs_labels

  if (!include_devmgr_config_in_vbmeta) {
    deps += [ ":devmgr_config" ]
  }

  metadata = {
    images = [
      {
        if (custom_signing_script == "" && !use_vboot) {
          archive = true
          if (use_zedboot_as_recovery) {
            bootserver_pave = [ "--zirconr" ]
          }
          bootserver_pave_zedboot = [ "--zircona" ]
        }
        name = zedboot_metadata_slot
        path = "zedboot.zbi"
        type = "zbi"
      },
    ]

    image_paths = [ "IMAGE_ZEDBOOT_ZBI=zedboot.zbi" ]
    if (use_zedboot_as_recovery) {
      image_paths += [ "IMAGE_ZIRCONR_ZBI=zedboot.zbi" ]
    }
  }
}

if (custom_signing_script != "") {
  custom_signed_zbi("signed") {
    output_name = "zedboot.zbi"
    deps = [ ":zbi" ]
    testonly = true

    zbi_outputs = get_target_outputs(":zbi")
    zbi = [ zbi_outputs[0] ]

    metadata = {
      images = [
        {
          archive = true
          if (use_zedboot_as_recovery) {
            bootserver_pave = [ "--zirconr" ]
          }
          name = "${zedboot_metadata_slot}.signed"
          bootserver_pave_zedboot = [ "--zircona" ]
          path = "zedboot.zbi.signed"
          type = "zbi.signed"
        },
      ]
      if (use_zedboot_as_recovery) {
        image_paths = [ "IMAGE_ZIRCONR_SIGNEDZBI=zedboot.zbi.signed" ]
      }
    }
  }
} else if (use_vboot) {
  vboot("signed") {
    output_name = "zedboot"
    deps = [ ":zbi" ]
    testonly = true
    metadata = {
      images = [
        {
          archive = true
          if (use_zedboot_as_recovery) {
            bootserver_pave = [ "--zirconr" ]
          }
          name = "${zedboot_metadata_slot}.signed"
          bootserver_pave_zedboot = [ "--zircona" ]
          path = "zedboot.vboot"
          type = "zbi.signed"
        },
      ]
      if (use_zedboot_as_recovery) {
        image_paths = [ "IMAGE_ZIRCONR_SIGNEDZBI=zedboot.vboot" ]
      }
    }
  }
}

if (use_vbmeta) {
  vbmeta("zedboot.vbmeta") {
    output_name = "zedboot"
    testonly = true
    if (custom_signing_script != "") {
      deps = [ ":signed" ]
      zbi_outputs = get_target_outputs(":signed")
      zbi = [ zbi_outputs[0] ]
    } else {
      deps = [ ":zbi" ]
      zbi_outputs = get_target_outputs(":zbi")
      zbi = [ zbi_outputs[0] ]
    }
    if (include_devmgr_config_in_vbmeta) {
      deps += [ ":devmgr_config.txt" ]

      boot_args_file = get_target_outputs(":devmgr_config.txt")

      # expecting a single file
      assert([ boot_args_file[0] ] == boot_args_file,
             "expect a single output file form 'devmgr_config.txt' target")

      prop_from_file = [
        {
          # zbi item type w/o ZBI_TYPE_ prefix
          type = "IMAGE_ARGS"
          file = boot_args_file[0]
        },
      ]
    }

    metadata = {
      images = [
        {
          archive = true
          if (use_zedboot_as_recovery) {
            bootserver_pave = [ "--vbmetar" ]
          }
          name = zedboot_metadata_slot
          bootserver_pave_zedboot = [ "--vbmetaa" ]
          path = "zedboot.vbmeta"
          type = "vbmeta"
        },
      ]
      if (use_zedboot_as_recovery) {
        image_paths = [ "IMAGE_VBMETAR_RAW=zedboot.vbmeta" ]
      }
    }
  }
}

if (target_cpu != "arm64" && !use_vboot) {
  esp("esp") {
    output_name = "zedboot"
    cmdline = "efi_cmdline.txt"
    deps = [ ":zbi" ]
    zedboot_zbi_outputs = get_target_outputs(":zbi")
    zedboot = zedboot_zbi_outputs[0]
    testonly = true

    metadata = {
      images = [
        {
          name = "zedboot-efi"
          path = "zedboot.esp.blk"
          type = "blk"
        },
      ]
      image_paths = [ "IMAGE_ZEDBOOT_ESP=zedboot.esp.blk" ]
    }
  }
}

group("zedboot") {
  deps = [ ":zbi" ]
  if (target_cpu != "arm64" && !use_vboot) {
    deps += [ ":esp" ]
  }
  if (custom_signing_script != "" || use_vboot) {
    deps += [ ":signed" ]
    if (bootfs_only && use_vbmeta) {
      deps += [ ":zedboot.vbmeta" ]
    }
  }
  testonly = true
}
